{
  "name": "oneblood",
  "version": "0.0.1",
  "description": "A Pulumi package for creating AWS resources for OneBlood.",
  "meta": {
    "moduleFormat": "(.*)"
  },
  "language": {
    "go": {
      "generateResourceContainerTypes": true,
      "importBasePath": "github.com/OneBloodDataScience/pulumi-oneblood/sdk/go/oneblood"
    },
    "nodejs": {
      "dependencies": {
        "@pulumi/aws": "^5.0.0"
      },
      "devDependencies": {
        "typescript": "^3.7.0"
      }
    },
    "python": {
      "requires": {
        "pulumi": "\u003e=3.181.0,\u003c4.0.0",
        "pulumi-aws": "\u003e=6.83.0,\u003c7.0.0"
      }
    }
  },
  "config": {},
  "types": {
    "oneblood:aws_lambda:LambdaAdditionalEnvs": {
      "properties": {
        "envs": {
          "type": "array",
          "items": {
            "$ref": "#/types/oneblood:aws_lambda:LambdaEnvs"
          },
          "description": "A list of additional environment variables."
        }
      },
      "type": "object",
      "required": [
        "envs"
      ]
    },
    "oneblood:aws_lambda:LambdaConfig": {
      "properties": {
        "alerts_email": {
          "type": "string",
          "description": "An optional email address to send Lambda alerts to."
        },
        "log_retention_days": {
          "type": "integer",
          "description": "The number of days to retain CloudWatch logs for the Lambda function.",
          "default": 365
        },
        "max_concurrency": {
          "type": "integer",
          "description": "The maximum number of concurrent executions for the Lambda function.",
          "default": 1
        },
        "memory_size": {
          "type": "integer",
          "description": "The amount of memory (in MB) that the Lambda function has access to.",
          "default": 8000
        },
        "retry_limit": {
          "type": "integer",
          "description": "The number of times to retry a failed Lambda invocation.",
          "default": 3
        },
        "timeout": {
          "type": "integer",
          "description": "The maximum amount of time (in seconds) that the Lambda function can run.",
          "default": 900
        }
      },
      "type": "object"
    },
    "oneblood:aws_lambda:LambdaEnvs": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The environment variable key."
        },
        "value": {
          "type": "string",
          "description": "The environment variable value."
        }
      },
      "type": "object",
      "required": [
        "key",
        "value"
      ]
    },
    "oneblood:s3:S3BucketConfig": {
      "properties": {
        "bucket_name": {
          "type": "string",
          "description": "The base name for the bucket, will be processed by S3Config.generate_bucket_name."
        },
        "cors_rules": {
          "type": "array",
          "items": {
            "$ref": "#/types/oneblood:s3:S3CorsRule"
          },
          "description": "A list of CORS rules for the bucket."
        },
        "lifecycle_rules": {
          "type": "array",
          "items": {
            "$ref": "#/types/oneblood:s3:S3LifecycleRule"
          },
          "description": "A list of lifecycle rules for the bucket."
        },
        "logging_config": {
          "$ref": "#/types/oneblood:s3:S3LoggingConfiguration",
          "description": "Configuration for S3 bucket logging."
        },
        "versioning_enabled": {
          "type": "boolean",
          "description": "Whether versioning is enabled for the bucket.",
          "default": false
        }
      },
      "type": "object",
      "required": [
        "bucket_name"
      ]
    },
    "oneblood:s3:S3CorsRule": {
      "properties": {
        "allowed_headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of headers that are allowed in a preflight OPTIONS request."
        },
        "allowed_methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of HTTP methods that are allowed."
        },
        "allowed_origins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of origins that are allowed to send requests."
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the CORS rule is enabled.",
          "default": false
        },
        "expose_headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of headers in the response that clients are allowed to access."
        },
        "max_age_seconds": {
          "type": "integer",
          "description": "The maximum amount of time (in seconds) that the browser should cache the preflight OPTIONS request."
        }
      },
      "type": "object",
      "required": [
        "allowed_origins",
        "max_age_seconds"
      ]
    },
    "oneblood:s3:S3LifecycleRule": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether the lifecycle rule is enabled.",
          "default": false
        },
        "expiration": {
          "$ref": "#/types/oneblood:s3:S3LifecycleRuleExpiration",
          "description": "The expiration settings for the rule."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the rule."
        },
        "transitions": {
          "type": "array",
          "items": {
            "$ref": "#/types/oneblood:s3:S3LifecycleRuleTransition"
          },
          "description": "A list of transitions for the rule."
        }
      },
      "type": "object"
    },
    "oneblood:s3:S3LifecycleRuleExpiration": {
      "properties": {
        "days": {
          "type": "integer",
          "description": "The number of days after object creation when the object expires."
        }
      },
      "type": "object",
      "required": [
        "days"
      ]
    },
    "oneblood:s3:S3LifecycleRuleTransition": {
      "properties": {
        "days": {
          "type": "integer",
          "description": "The number of days after object creation when the object is transitioned to the specified storage class."
        },
        "storage_class": {
          "$ref": "#/types/oneblood:s3:S3StorageClass",
          "description": "The storage class to transition the object to."
        }
      },
      "type": "object",
      "required": [
        "days",
        "storage_class"
      ]
    },
    "oneblood:s3:S3LoggingConfiguration": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether logging is enabled for the bucket.",
          "default": false
        },
        "target_key_prefix": {
          "type": "string",
          "description": "The prefix for the log object keys."
        }
      },
      "type": "object"
    },
    "oneblood:s3:S3StorageClass": {
      "type": "string",
      "enum": [
        {
          "value": "STANDARD"
        },
        {
          "value": "STANDARD_IA"
        },
        {
          "value": "ONEZONE_IA"
        },
        {
          "value": "GLACIER"
        },
        {
          "value": "DEEP_ARCHIVE"
        },
        {
          "value": "INTELLIGENT_TIERING"
        }
      ]
    }
  },
  "provider": {
    "type": "object"
  },
  "resources": {
    "oneblood:apigateway:ApiGatewayLambdaComponent": {
      "properties": {
        "log_group": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:cloudwatch%2FlogGroup:LogGroup",
          "description": "The CloudWatch Log Group for API Gateway access logs."
        },
        "rest_api": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:apigateway%2FrestApi:RestApi",
          "description": "The created API Gateway RestApi."
        },
        "stage": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:apigateway%2Fstage:Stage",
          "description": "The created API Gateway Stage."
        },
        "url": {
          "type": "string",
          "description": "The URL of the deployed API Gateway."
        }
      },
      "type": "object",
      "inputProperties": {
        "lambda_function": {
          "type": "string",
          "description": "The ARN of the Lambda function to integrate with API Gateway."
        },
        "provider": {
          "type": "string",
          "description": "The AWS provider to use for resource creation."
        }
      },
      "requiredInputs": [
        "lambda_function",
        "provider"
      ],
      "isComponent": true
    },
    "oneblood:aws_lambda:LambdaComponent": {
      "properties": {
        "lambda_function_arn": {
          "type": "string",
          "description": "The ARN of the created Lambda function."
        },
        "lambda_role_arn": {
          "type": "string",
          "description": "The ARN of the IAM role created for the Lambda function."
        }
      },
      "type": "object",
      "inputProperties": {
        "additional_envs": {
          "$ref": "#/types/oneblood:aws_lambda:LambdaAdditionalEnvs",
          "description": "Additional environment variables for the Lambda function."
        },
        "ecr_repo": {
          "type": "string",
          "description": "The ARN of the ECR repository containing the Lambda image."
        },
        "github_repo": {
          "type": "string",
          "description": "The GitHub repository (e.g., 'owner/repo') to set Lambda ARN as a variable."
        },
        "kms_key_arns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of KMS key ARNs to grant decrypt/encrypt permissions to the Lambda function."
        },
        "lambda_config": {
          "$ref": "#/types/oneblood:aws_lambda:LambdaConfig",
          "description": "Configuration for the Lambda function."
        },
        "s3_bucket_arns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of S3 bucket ARNs to grant read/write permissions to the Lambda function."
        },
        "s3_trigger_bucket": {
          "type": "string",
          "description": "The name or ARN of an S3 bucket to configure as a trigger for the Lambda function."
        },
        "secrets_manager_arns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Secrets Manager ARNs to grant access to the Lambda function."
        }
      },
      "requiredInputs": [
        "ecr_repo",
        "lambda_config"
      ],
      "isComponent": true
    },
    "oneblood:cloudwatch:CloudwatchComponent": {
      "properties": {
        "alert_topic": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:sns%2Ftopic:Topic",
          "description": "The SNS Topic for Lambda alerts."
        },
        "log_group": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:cloudwatch%2FlogGroup:LogGroup",
          "description": "The CloudWatch Log Group for the Lambda function."
        }
      },
      "type": "object",
      "inputProperties": {
        "lambda_config": {
          "$ref": "#/types/oneblood:aws_lambda:LambdaConfig",
          "description": "Configuration for the Lambda function, including alerting settings."
        },
        "lambda_function": {
          "type": "string",
          "description": "The ARN of the Lambda function to monitor."
        }
      },
      "requiredInputs": [
        "lambda_config",
        "lambda_function"
      ],
      "isComponent": true
    },
    "oneblood:github:GithubLambdaPermissionsComponent": {
      "properties": {
        "lambda_policy_arn": {
          "type": "string",
          "description": "The ARN of the IAM policy created for Lambda permissions."
        }
      },
      "type": "object",
      "inputProperties": {
        "github_oidc_role_arn": {
          "type": "string",
          "description": "The ARN of the GitHub OIDC role to attach permissions to."
        },
        "lambda_arns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Lambda function ARNs to grant update/get permissions for."
        }
      },
      "requiredInputs": [
        "github_oidc_role_arn",
        "lambda_arns"
      ],
      "isComponent": true
    },
    "oneblood:github:OidcComponent": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The AWS account ID."
        },
        "github_repo": {
          "type": "string",
          "description": "The GitHub repository configured for OIDC."
        },
        "role_arn": {
          "type": "string",
          "description": "The ARN of the created GitHub OIDC IAM role."
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": "A list of GitHub secrets created (if save_github_secrets is true)."
        }
      },
      "type": "object",
      "inputProperties": {
        "additional_ecr_repo_arns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional ECR repository ARNs to grant access to."
        },
        "ecr_repos": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of ECR repository ARNs to grant access to."
        },
        "github_branch": {
          "type": "string",
          "description": "The GitHub branch to configure OIDC for. Defaults to 'main'.",
          "default": "main"
        },
        "github_repo": {
          "type": "string",
          "description": "The GitHub repository (e.g., 'owner/repo') to configure OIDC for."
        },
        "save_github_secrets": {
          "type": "boolean",
          "description": "Whether to save generated AWS credentials as GitHub secrets. Defaults to true.",
          "default": true
        }
      },
      "requiredInputs": [
        "ecr_repos",
        "github_repo"
      ],
      "isComponent": true
    },
    "oneblood:s3:S3BucketComponent": {
      "properties": {
        "bucket": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:s3%2Fbucket:Bucket",
          "description": "The created S3 bucket."
        },
        "bucket_policy": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:s3%2FbucketPolicy:BucketPolicy",
          "description": "The created S3 bucket policy."
        },
        "cloudtrail_trail": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:cloudtrail%2Ftrail:Trail",
          "description": "The CloudTrail trail created for S3 data events (if logging is enabled)."
        },
        "log_bucket": {
          "$ref": "/aws/v6.37.0/schema.json#/resources/aws:s3%2Fbucket:Bucket",
          "description": "The S3 bucket used for logging (if logging is enabled)."
        }
      },
      "type": "object",
      "inputProperties": {
        "bucket_config": {
          "$ref": "#/types/oneblood:s3:S3BucketConfig",
          "description": "Configuration for the S3 bucket."
        },
        "kms_key": {
          "type": "string",
          "description": "The ARN of the KMS key to use for S3 bucket encryption."
        },
        "provider": {
          "type": "string",
          "description": "The AWS provider to use for resource creation."
        }
      },
      "requiredInputs": [
        "kms_key",
        "provider"
      ],
      "isComponent": true
    }
  }
}
